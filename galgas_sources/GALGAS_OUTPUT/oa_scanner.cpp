//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'oa_scanner.cpp'                            *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 24th, 2009, at 12h16'3"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "oa_scanner.h"

#include "strings/unicode_character_cpp.h"
#include "galgas/scanner_actions.h"
#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_oa_scanner::cTokenFor_oa_scanner (void) :
mLexicalAttribute_identifierString (),
mLexicalAttribute_ulongValue () {
}

//---------------------------------------------------------------------------*

oa_scanner::
oa_scanner (C_Compiler * inCallerCompiler,
                const C_String & inDependencyFileExtension,
                const C_String & inDependencyFilePath,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

oa_scanner::
oa_scanner (C_Compiler * inCallerCompiler,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const utf32 gLexicalMessage_0 [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;
//--- Message 1
static const utf32 gLexicalMessage_1 [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;
//--- Message 2
static const utf32 gLexicalMessage_2 [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$identifier$' :
static const utf32 gSyntaxErrorMessage_identifier [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$system$' :
static const utf32 gSyntaxErrorMessage_system [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('y'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$end$' :
static const utf32 gSyntaxErrorMessage_end [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$task$' :
static const utf32 gSyntaxErrorMessage_task [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$standard$' :
static const utf32 gSyntaxErrorMessage_standard [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$extended$' :
static const utf32 gSyntaxErrorMessage_extended [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$message$' :
static const utf32 gSyntaxErrorMessage_message [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$length$' :
static const utf32 gSyntaxErrorMessage_length [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$priority$' :
static const utf32 gSyntaxErrorMessage_priority [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$period$' :
static const utf32 gSyntaxErrorMessage_period [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$offset$' :
static const utf32 gSyntaxErrorMessage_offset [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE ('f'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$on$' :
static const utf32 gSyntaxErrorMessage_on [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$deadline$' :
static const utf32 gSyntaxErrorMessage_deadline [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$duration$' :
static const utf32 gSyntaxErrorMessage_duration [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$processor$' :
static const utf32 gSyntaxErrorMessage_processor [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$can$' :
static const utf32 gSyntaxErrorMessage_can [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$van$' :
static const utf32 gSyntaxErrorMessage_van [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$network$' :
static const utf32 gSyntaxErrorMessage_network [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$scalingfactor$' :
static const utf32 gSyntaxErrorMessage_scalingfactor [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE ('f'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$every$' :
static const utf32 gSyntaxErrorMessage_every [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('y'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$,$' :
static const utf32 gSyntaxErrorMessage__2C_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE ('\''),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$;$' :
static const utf32 gSyntaxErrorMessage__3B_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('\''),
  TO_UNICODE (';'),
  TO_UNICODE ('\''),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$..$' :
static const utf32 gSyntaxErrorMessage__2E__2E_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('\''),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('\''),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$literal_integer$' :
static const utf32 gSyntaxErrorMessage_literal_5F_integer [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void oa_scanner::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const utf32 * syntaxErrorMessageArray [25] = {kEndOfSourceLexicalErrorMessage,
       gSyntaxErrorMessage_identifier,
       gSyntaxErrorMessage_system,
       gSyntaxErrorMessage_end,
       gSyntaxErrorMessage_task,
       gSyntaxErrorMessage_standard,
       gSyntaxErrorMessage_extended,
       gSyntaxErrorMessage_message,
       gSyntaxErrorMessage_length,
       gSyntaxErrorMessage_priority,
       gSyntaxErrorMessage_period,
       gSyntaxErrorMessage_offset,
       gSyntaxErrorMessage_on,
       gSyntaxErrorMessage_deadline,
       gSyntaxErrorMessage_duration,
       gSyntaxErrorMessage_processor,
       gSyntaxErrorMessage_can,
       gSyntaxErrorMessage_van,
       gSyntaxErrorMessage_network,
       gSyntaxErrorMessage_scalingfactor,
       gSyntaxErrorMessage_every,
       gSyntaxErrorMessage__2C_,
       gSyntaxErrorMessage__3B_,
       gSyntaxErrorMessage__2E__2E_,
       gSyntaxErrorMessage_literal_5F_integer} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Key words table 'keyWordList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_keyWordList = 19 ;

static const utf32 kEntry_0_forTable_keyWordList [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_keyWordList [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_keyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_keyWordList [] = {
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_keyWordList [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_keyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_keyWordList [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_keyWordList [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE ('f'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_keyWordList [] = {
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_keyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('y'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_keyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_keyWordList [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_keyWordList [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_keyWordList [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_keyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_15_forTable_keyWordList [] = {
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_16_forTable_keyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_17_forTable_keyWordList [] = {
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_18_forTable_keyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE ('f'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_keyWordList [ktable_size_keyWordList] = {
  {kEntry_0_forTable_keyWordList, 2, oa_scanner::oa_scanner_1_on},
  {kEntry_1_forTable_keyWordList, 3, oa_scanner::oa_scanner_1_can},
  {kEntry_2_forTable_keyWordList, 3, oa_scanner::oa_scanner_1_end},
  {kEntry_3_forTable_keyWordList, 3, oa_scanner::oa_scanner_1_van},
  {kEntry_4_forTable_keyWordList, 4, oa_scanner::oa_scanner_1_task},
  {kEntry_5_forTable_keyWordList, 5, oa_scanner::oa_scanner_1_every},
  {kEntry_6_forTable_keyWordList, 6, oa_scanner::oa_scanner_1_length},
  {kEntry_7_forTable_keyWordList, 6, oa_scanner::oa_scanner_1_offset},
  {kEntry_8_forTable_keyWordList, 6, oa_scanner::oa_scanner_1_period},
  {kEntry_9_forTable_keyWordList, 6, oa_scanner::oa_scanner_1_system},
  {kEntry_10_forTable_keyWordList, 7, oa_scanner::oa_scanner_1_message},
  {kEntry_11_forTable_keyWordList, 7, oa_scanner::oa_scanner_1_network},
  {kEntry_12_forTable_keyWordList, 8, oa_scanner::oa_scanner_1_deadline},
  {kEntry_13_forTable_keyWordList, 8, oa_scanner::oa_scanner_1_duration},
  {kEntry_14_forTable_keyWordList, 8, oa_scanner::oa_scanner_1_extended},
  {kEntry_15_forTable_keyWordList, 8, oa_scanner::oa_scanner_1_priority},
  {kEntry_16_forTable_keyWordList, 8, oa_scanner::oa_scanner_1_standard},
  {kEntry_17_forTable_keyWordList, 9, oa_scanner::oa_scanner_1_processor},
  {kEntry_18_forTable_keyWordList, 13, oa_scanner::oa_scanner_1_scalingfactor}
} ;

sint16 oa_scanner::search_into_keyWordList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_keyWordList, ktable_size_keyWordList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'delimitorsList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_delimitorsList = 3 ;

static const utf32 kEntry_0_forTable_delimitorsList [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_delimitorsList [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_delimitorsList [] = {
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_delimitorsList [ktable_size_delimitorsList] = {
  {kEntry_0_forTable_delimitorsList, 1, oa_scanner::oa_scanner_1__2C_},
  {kEntry_1_forTable_delimitorsList, 1, oa_scanner::oa_scanner_1__3B_},
  {kEntry_2_forTable_delimitorsList, 2, oa_scanner::oa_scanner_1__2E__2E_}
} ;

sint16 oa_scanner::search_into_delimitorsList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_delimitorsList, ktable_size_delimitorsList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String oa_scanner::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_oa_scanner * ptr = (cTokenFor_oa_scanner *) inTokenPtr ;
  C_String s ;
  if (ptr == NULL) {
    s << "$$" ;
  }else{
    switch (ptr->mTokenCode) {
    case  oa_scanner_1_:
      s << "$$" ;
      break ;
    case  oa_scanner_1_identifier:
      s << "$"
        << "identifier"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (ptr->mLexicalAttribute_identifierString) ;
      break;
    case  oa_scanner_1_system:
      s << "$"
        << "system"
        << "$" ;
      break;
    case  oa_scanner_1_end:
      s << "$"
        << "end"
        << "$" ;
      break;
    case  oa_scanner_1_task:
      s << "$"
        << "task"
        << "$" ;
      break;
    case  oa_scanner_1_standard:
      s << "$"
        << "standard"
        << "$" ;
      break;
    case  oa_scanner_1_extended:
      s << "$"
        << "extended"
        << "$" ;
      break;
    case  oa_scanner_1_message:
      s << "$"
        << "message"
        << "$" ;
      break;
    case  oa_scanner_1_length:
      s << "$"
        << "length"
        << "$" ;
      break;
    case  oa_scanner_1_priority:
      s << "$"
        << "priority"
        << "$" ;
      break;
    case  oa_scanner_1_period:
      s << "$"
        << "period"
        << "$" ;
      break;
    case  oa_scanner_1_offset:
      s << "$"
        << "offset"
        << "$" ;
      break;
    case  oa_scanner_1_on:
      s << "$"
        << "on"
        << "$" ;
      break;
    case  oa_scanner_1_deadline:
      s << "$"
        << "deadline"
        << "$" ;
      break;
    case  oa_scanner_1_duration:
      s << "$"
        << "duration"
        << "$" ;
      break;
    case  oa_scanner_1_processor:
      s << "$"
        << "processor"
        << "$" ;
      break;
    case  oa_scanner_1_can:
      s << "$"
        << "can"
        << "$" ;
      break;
    case  oa_scanner_1_van:
      s << "$"
        << "van"
        << "$" ;
      break;
    case  oa_scanner_1_network:
      s << "$"
        << "network"
        << "$" ;
      break;
    case  oa_scanner_1_scalingfactor:
      s << "$"
        << "scalingfactor"
        << "$" ;
      break;
    case  oa_scanner_1_every:
      s << "$"
        << "every"
        << "$" ;
      break;
    case  oa_scanner_1__2C_:
      s << "$"
        << ","
        << "$" ;
      break;
    case  oa_scanner_1__3B_:
      s << "$"
        << ";"
        << "$" ;
      break;
    case  oa_scanner_1__2E__2E_:
      s << "$"
        << ".."
        << "$" ;
      break;
    case  oa_scanner_1_literal_5F_integer:
      s << "$"
        << "literal_integer"
        << "$" ;
      s << " " ;
      s.appendUnsigned (ptr->mLexicalAttribute_ulongValue) ;
      break;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      U N I C O D E    S T R I N G S                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Unicode string for ','
static const utf32 kUnicodeString__2C_ [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '..'
static const utf32 kUnicodeString__2E__2E_ [] = {
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ';'
static const utf32 kUnicodeString__3B_ [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
} ; 

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool oa_scanner::
parseLexicalToken (void) {
  cTokenFor_oa_scanner token ;
  mLoop = true ;
  token.mTokenCode = -1 ;
  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
    token.mLexicalAttribute_identifierString.setLengthToZero () ;
    token.mLexicalAttribute_ulongValue = 0 ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
          testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_identifierString, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
              testForInputUTF32Char (TO_UNICODE ('_')) ||
              testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = search_into_keyWordList (token.mLexicalAttribute_identifierString) ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = oa_scanner_1_identifier ;
        }
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2E__2E_, 2, true)) {
        token.mTokenCode = oa_scanner_1__2E__2E_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        token.mTokenCode = oa_scanner_1__2C_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        token.mTokenCode = oa_scanner_1__3B_ ;
        enterToken (token) ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_ulongValue, gLexicalMessage_0, gLexicalMessage_1) ;
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_ulongValue, gLexicalMessage_0, gLexicalMessage_1) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = oa_scanner_1_literal_5F_integer ;
        enterToken (token) ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
              testForInputUTF32CharRange (TO_UNICODE ('\v'), TO_UNICODE ('~'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\n'))) {
        }else{
          lexicalError (gLexicalMessage_2 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        token.mTokenCode = oa_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  if ((UNICODE_VALUE (mCurrentChar) == '\0') && (token.mTemplateStringBeforeToken.length () > 0)) {
    token.mTokenCode = 0 ;
    enterToken (token) ;
  }
  return token.mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 oa_scanner::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_oa_scanner token ;
  mLoop = true ;
  token.mTokenCode = -1 ;
  while (token.mTokenCode < 0) {
    token.mLexicalAttribute_identifierString.setLengthToZero () ;
    token.mLexicalAttribute_ulongValue = 0 ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
          testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_identifierString, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
              testForInputUTF32Char (TO_UNICODE ('_')) ||
              testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = search_into_keyWordList (token.mLexicalAttribute_identifierString) ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = oa_scanner_1_identifier ;
        }
      }else if (testForInputUTF32String (kUnicodeString__2E__2E_, 2, true)) {
        token.mTokenCode = oa_scanner_1__2E__2E_ ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        token.mTokenCode = oa_scanner_1__2C_ ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        token.mTokenCode = oa_scanner_1__3B_ ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_ulongValue, gLexicalMessage_0, gLexicalMessage_1) ;
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_ulongValue, gLexicalMessage_0, gLexicalMessage_1) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = oa_scanner_1_literal_5F_integer ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
              testForInputUTF32CharRange (TO_UNICODE ('\v'), TO_UNICODE ('~'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\n'))) {
        }else{
          lexicalError (gLexicalMessage_2 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        token.mTokenCode = oa_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return token.mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 oa_scanner::getStylesCount (void) {
  return 5 ;
}

//---------------------------------------------------------------------------*

const char * oa_scanner::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [6] = {"Default style", "Identifiers", "Key words", "Delimitors", "Integer constants", NULL} ;
  return (inIndex < 5) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * oa_scanner::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [6] = {"", "identifier", "keyWords", "delimitors", "integer_csts", NULL} ;
  return (inIndex < 5) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 oa_scanner::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [25] = {0,
    1 /* oa_scanner_1_identifier */,
    2 /* oa_scanner_1_system */,
    2 /* oa_scanner_1_end */,
    2 /* oa_scanner_1_task */,
    2 /* oa_scanner_1_standard */,
    2 /* oa_scanner_1_extended */,
    2 /* oa_scanner_1_message */,
    2 /* oa_scanner_1_length */,
    2 /* oa_scanner_1_priority */,
    2 /* oa_scanner_1_period */,
    2 /* oa_scanner_1_offset */,
    2 /* oa_scanner_1_on */,
    2 /* oa_scanner_1_deadline */,
    2 /* oa_scanner_1_duration */,
    2 /* oa_scanner_1_processor */,
    2 /* oa_scanner_1_can */,
    2 /* oa_scanner_1_van */,
    2 /* oa_scanner_1_network */,
    2 /* oa_scanner_1_scalingfactor */,
    2 /* oa_scanner_1_every */,
    3 /* oa_scanner_1__2C_ */,
    3 /* oa_scanner_1__3B_ */,
    3 /* oa_scanner_1__2E__2E_ */,
    4 /* oa_scanner_1_literal_5F_integer */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void oa_scanner::enterToken (const cTokenFor_oa_scanner & inToken) {
  cTokenFor_oa_scanner * ptr = NULL ;
  macroMyNew (ptr, cTokenFor_oa_scanner ()) ;
  ptr->mTokenCode = inToken.mTokenCode ;
  ptr->mFirstLocation = mTokenFirstLocation ;
  ptr->mLastLocation  = mTokenLastLocation ;
  ptr->mTemplateStringBeforeToken  = inToken.mTemplateStringBeforeToken ;
  ptr->mLexicalAttribute_identifierString = inToken.mLexicalAttribute_identifierString ;
  ptr->mLexicalAttribute_ulongValue = inToken.mLexicalAttribute_ulongValue ;
  enterTokenFromPointer (ptr) ;
}

//---------------------------------------------------------------------------*

void oa_scanner::
assignFromAttribute_identifierString (GGS_lstring & outValue) const {
  cTokenFor_oa_scanner * ptr = (cTokenFor_oa_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, ptr->mLexicalAttribute_identifierString) ;
}

//---------------------------------------------------------------------------*

C_String oa_scanner::
attributeValue_identifierString (void) const {
  cTokenFor_oa_scanner * ptr = (cTokenFor_oa_scanner *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_identifierString ;
}

//---------------------------------------------------------------------------*

void oa_scanner::
assignFromAttribute_ulongValue (GGS_luint & outValue) const {
  cTokenFor_oa_scanner * ptr = (cTokenFor_oa_scanner *) mCurrentTokenPtr ;
  outValue = GGS_luint (* this, ptr->mLexicalAttribute_ulongValue) ;
}

//---------------------------------------------------------------------------*

uint32 oa_scanner::
attributeValue_ulongValue (void) const {
  cTokenFor_oa_scanner * ptr = (cTokenFor_oa_scanner *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_ulongValue ;
}

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

