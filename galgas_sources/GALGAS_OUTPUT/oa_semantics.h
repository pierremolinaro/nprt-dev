//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'oa_semantics.h'                            *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                    november 29th, 2006, at 20h30'17"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef oa_semantics_DEFINED
#define oa_semantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_M_processor ;
class GGS_M_network ;
class GGS_AC_canMessage ;
class cPtr_AC_canMessage ;
class GGS_C_canIndependantMessage ;
class cPtr_C_canIndependantMessage ;
class GGS_C_canMessageFromMessage ;
class cPtr_C_canMessageFromMessage ;
class GGS_C_canMessageFromTask ;
class cPtr_C_canMessageFromTask ;
class GGS_M_messages ;
class GGS_AC_task ;
class cPtr_AC_task ;
class GGS_C_independantTask ;
class cPtr_C_independantTask ;
class GGS_C_taskDependsFromTask ;
class cPtr_C_taskDependsFromTask ;
class GGS_C_taskDependsFromMessage ;
class cPtr_C_taskDependsFromMessage ;
class GGS_M_tasks ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@M_processor'                             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_processor ;

class GGS_M_processor : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_processor element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Comparison methods
  public : GGS_bool operator == (const GGS_M_processor & inOperand) const ;
  public : GGS_bool operator != (const GGS_M_processor & inOperand) const ;
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_processor * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_M_processor * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_M_processor constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_luint &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- 'searchKeyGetIndex' Search Method
  public : void method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_luint   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_luint & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_M_processor constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_M_processor & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_M_processor reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                             Map '@M_network'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_network ;

class GGS_M_network : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_network element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Comparison methods
  public : GGS_bool operator == (const GGS_M_network & inOperand) const ;
  public : GGS_bool operator != (const GGS_M_network & inOperand) const ;
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_network * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_M_network * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_M_network constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_bool&  inParameter0,
                                const GGS_luint &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_bool  & outParameter0,
                                GGS_luint   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- 'searchKeyGetIndex' Search Method
  public : void method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_bool  & outParameter0,
                                GGS_luint   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_bool& inParameter0,
                                   const GGS_luint & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_bool& outParameter0,
                                   GGS_luint & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_M_network constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_M_network & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_M_network reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_AC_canMessage'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_canMessage {
//--- Pointer to actual instance
  protected : cPtr_AC_canMessage * mPointer ;
//--- Default constructor
  public : GGS_AC_canMessage (void) ;
//--- Copy constructor
  public : GGS_AC_canMessage (const GGS_AC_canMessage &) ;
//--- Virtual destructor
  public : virtual ~GGS_AC_canMessage (void) ;
//--- Assignment operator
  public : void operator = (const GGS_AC_canMessage &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_AC_canMessage & inOperand) const ;
  public : GGS_bool operator != (const GGS_AC_canMessage & inOperand) const ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_AC_canMessage & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_AC_canMessage * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_AC_canMessage * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_canMessage * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_C_canIndependantMessage'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_canIndependantMessage : public GGS_AC_canMessage {
//--- Default constructor
  public : GGS_C_canIndependantMessage (void) ;
//--- Copy constructor
  public : GGS_C_canIndependantMessage (const GGS_C_canIndependantMessage &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_canIndependantMessage (void) ;
//--- 'new' constructor
  public : static GGS_C_canIndependantMessage constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_canIndependantMessage &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_canIndependantMessage & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_canIndependantMessage & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_canIndependantMessage * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_canIndependantMessage * operator () (LOCATION_ARGS) const {
      return (cPtr_C_canIndependantMessage *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_C_canMessageFromMessage'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_canMessageFromMessage : public GGS_AC_canMessage {
//--- Default constructor
  public : GGS_C_canMessageFromMessage (void) ;
//--- Copy constructor
  public : GGS_C_canMessageFromMessage (const GGS_C_canMessageFromMessage &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_canMessageFromMessage (void) ;
//--- 'new' constructor
  public : static GGS_C_canMessageFromMessage constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_canMessageFromMessage &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_canMessageFromMessage & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_canMessageFromMessage & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_luint  reader_mMessageIndex (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_canMessageFromMessage * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_canMessageFromMessage * operator () (LOCATION_ARGS) const {
      return (cPtr_C_canMessageFromMessage *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_canMessageFromTask'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_canMessageFromTask : public GGS_AC_canMessage {
//--- Default constructor
  public : GGS_C_canMessageFromTask (void) ;
//--- Copy constructor
  public : GGS_C_canMessageFromTask (const GGS_C_canMessageFromTask &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_canMessageFromTask (void) ;
//--- 'new' constructor
  public : static GGS_C_canMessageFromTask constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_canMessageFromTask &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_canMessageFromTask & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_canMessageFromTask & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_luint  reader_mTaskIndex (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_canMessageFromTask * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_canMessageFromTask * operator () (LOCATION_ARGS) const {
      return (cPtr_C_canMessageFromTask *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@M_messages'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_messages ;

class GGS_M_messages : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_messages element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Comparison methods
  public : GGS_bool operator == (const GGS_M_messages & inOperand) const ;
  public : GGS_bool operator != (const GGS_M_messages & inOperand) const ;
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_messages * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_M_messages * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_M_messages constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_luint &  inParameter0,
                                const GGS_luint &  inParameter1,
                                const GGS_luint &  inParameter2,
                                const GGS_luint &  inParameter3,
                                const GGS_luint &  inParameter4,
                                const GGS_luint &  inParameter5,
                                const GGS_luint &  inParameter6,
                                const GGS_AC_canMessage &  inParameter7 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint   & outParameter0,
                                GGS_luint   & outParameter1,
                                GGS_luint   & outParameter2,
                                GGS_luint   & outParameter3,
                                GGS_luint   & outParameter4,
                                GGS_luint   & outParameter5,
                                GGS_luint   & outParameter6,
                                GGS_AC_canMessage   & outParameter7 COMMA_LOCATION_ARGS) const ;
//--- 'searchKeyGetIndex' Search Method
  public : void method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_luint   & outParameter0,
                                GGS_luint   & outParameter1,
                                GGS_luint   & outParameter2,
                                GGS_luint   & outParameter3,
                                GGS_luint   & outParameter4,
                                GGS_luint   & outParameter5,
                                GGS_luint   & outParameter6,
                                GGS_AC_canMessage   & outParameter7 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_luint & inParameter0,
                                   const GGS_luint & inParameter1,
                                   const GGS_luint & inParameter2,
                                   const GGS_luint & inParameter3,
                                   const GGS_luint & inParameter4,
                                   const GGS_luint & inParameter5,
                                   const GGS_luint & inParameter6,
                                   const GGS_AC_canMessage & inParameter7,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint & outParameter0,
                                   GGS_luint & outParameter1,
                                   GGS_luint & outParameter2,
                                   GGS_luint & outParameter3,
                                   GGS_luint & outParameter4,
                                   GGS_luint & outParameter5,
                                   GGS_luint & outParameter6,
                                   GGS_AC_canMessage & outParameter7,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_M_messages constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_M_messages & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_M_messages reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        GALGAS class 'GGS_AC_task'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_task {
//--- Pointer to actual instance
  protected : cPtr_AC_task * mPointer ;
//--- Default constructor
  public : GGS_AC_task (void) ;
//--- Copy constructor
  public : GGS_AC_task (const GGS_AC_task &) ;
//--- Virtual destructor
  public : virtual ~GGS_AC_task (void) ;
//--- Assignment operator
  public : void operator = (const GGS_AC_task &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_AC_task & inOperand) const ;
  public : GGS_bool operator != (const GGS_AC_task & inOperand) const ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_AC_task & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_AC_task * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_AC_task * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_task * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_independantTask'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_independantTask : public GGS_AC_task {
//--- Default constructor
  public : GGS_C_independantTask (void) ;
//--- Copy constructor
  public : GGS_C_independantTask (const GGS_C_independantTask &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_independantTask (void) ;
//--- 'new' constructor
  public : static GGS_C_independantTask constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_independantTask &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_independantTask & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_independantTask & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_independantTask * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_independantTask * operator () (LOCATION_ARGS) const {
      return (cPtr_C_independantTask *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_taskDependsFromTask'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_taskDependsFromTask : public GGS_AC_task {
//--- Default constructor
  public : GGS_C_taskDependsFromTask (void) ;
//--- Copy constructor
  public : GGS_C_taskDependsFromTask (const GGS_C_taskDependsFromTask &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_taskDependsFromTask (void) ;
//--- 'new' constructor
  public : static GGS_C_taskDependsFromTask constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_taskDependsFromTask &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_taskDependsFromTask & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_taskDependsFromTask & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_luint  reader_mTask (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mEvery (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_taskDependsFromTask * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_taskDependsFromTask * operator () (LOCATION_ARGS) const {
      return (cPtr_C_taskDependsFromTask *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_C_taskDependsFromMessage'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_taskDependsFromMessage : public GGS_AC_task {
//--- Default constructor
  public : GGS_C_taskDependsFromMessage (void) ;
//--- Copy constructor
  public : GGS_C_taskDependsFromMessage (const GGS_C_taskDependsFromMessage &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_taskDependsFromMessage (void) ;
//--- 'new' constructor
  public : static GGS_C_taskDependsFromMessage constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_taskDependsFromMessage &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_taskDependsFromMessage & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_taskDependsFromMessage & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_luint  reader_mMessage (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mEvery (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_taskDependsFromMessage * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_taskDependsFromMessage * operator () (LOCATION_ARGS) const {
      return (cPtr_C_taskDependsFromMessage *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                              Map '@M_tasks'                               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_tasks ;

class GGS_M_tasks : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_tasks element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Comparison methods
  public : GGS_bool operator == (const GGS_M_tasks & inOperand) const ;
  public : GGS_bool operator != (const GGS_M_tasks & inOperand) const ;
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_tasks * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_M_tasks * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_M_tasks constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_luint &  inParameter0,
                                const GGS_luint &  inParameter1,
                                const GGS_luint &  inParameter2,
                                const GGS_luint &  inParameter3,
                                const GGS_luint &  inParameter4,
                                const GGS_luint &  inParameter5,
                                const GGS_luint &  inParameter6,
                                const GGS_AC_task &  inParameter7 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint   & outParameter0,
                                GGS_luint   & outParameter1,
                                GGS_luint   & outParameter2,
                                GGS_luint   & outParameter3,
                                GGS_luint   & outParameter4,
                                GGS_luint   & outParameter5,
                                GGS_luint   & outParameter6,
                                GGS_AC_task   & outParameter7 COMMA_LOCATION_ARGS) const ;
//--- 'searchKeyGetIndex' Search Method
  public : void method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_luint   & outParameter0,
                                GGS_luint   & outParameter1,
                                GGS_luint   & outParameter2,
                                GGS_luint   & outParameter3,
                                GGS_luint   & outParameter4,
                                GGS_luint   & outParameter5,
                                GGS_luint   & outParameter6,
                                GGS_AC_task   & outParameter7 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_luint & inParameter0,
                                   const GGS_luint & inParameter1,
                                   const GGS_luint & inParameter2,
                                   const GGS_luint & inParameter3,
                                   const GGS_luint & inParameter4,
                                   const GGS_luint & inParameter5,
                                   const GGS_luint & inParameter6,
                                   const GGS_AC_task & inParameter7,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint & outParameter0,
                                   GGS_luint & outParameter1,
                                   GGS_luint & outParameter2,
                                   GGS_luint & outParameter3,
                                   GGS_luint & outParameter4,
                                   GGS_luint & outParameter5,
                                   GGS_luint & outParameter6,
                                   GGS_AC_task & outParameter7,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_M_tasks constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_M_tasks & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_M_tasks reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

void routine_performComputations (C_Lexique &,
                                GGS_M_processor  &,
                                GGS_M_network  &,
                                GGS_M_messages  &,
                                GGS_M_tasks  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of map '@M_processor'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_processor {
  public : GGS_luint  mStep ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_processor : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_processor (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_M_processor & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_processor * nextObject (void) const { return (elementOf_GGS_M_processor *) mNextItem ; }
  public : inline elementOf_GGS_M_processor * infObject (void) const { return (elementOf_GGS_M_processor *) mInfPtr ; }
  public : inline elementOf_GGS_M_processor * supObject (void) const { return (elementOf_GGS_M_processor *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_M_processor mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of map '@M_network'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_network {
  public : GGS_bool mCANnetwork ;
  public : GGS_luint  mScalingFactor ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_network : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_network (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_M_network & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_network * nextObject (void) const { return (elementOf_GGS_M_network *) mNextItem ; }
  public : inline elementOf_GGS_M_network * infObject (void) const { return (elementOf_GGS_M_network *) mInfPtr ; }
  public : inline elementOf_GGS_M_network * supObject (void) const { return (elementOf_GGS_M_network *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_M_network mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_AC_canMessage.h"

//---------------------------------------------------------------------------*

#include "include_C_canIndependantMessage.h"

//---------------------------------------------------------------------------*

#include "include_C_canMessageFromMessage.h"

//---------------------------------------------------------------------------*

#include "include_C_canMessageFromTask.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of map '@M_messages'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_messages {
  public : GGS_luint  mClass ;
  public : GGS_luint  mNetworkIndex ;
  public : GGS_luint  mBytesCount ;
  public : GGS_luint  mPriority ;
  public : GGS_luint  mOffset ;
  public : GGS_luint  mDeadline ;
  public : GGS_luint  mPeriod ;
  public : GGS_AC_canMessage  mMessageKind ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_messages : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_messages (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_M_messages & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_messages * nextObject (void) const { return (elementOf_GGS_M_messages *) mNextItem ; }
  public : inline elementOf_GGS_M_messages * infObject (void) const { return (elementOf_GGS_M_messages *) mInfPtr ; }
  public : inline elementOf_GGS_M_messages * supObject (void) const { return (elementOf_GGS_M_messages *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_M_messages mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_AC_task.h"

//---------------------------------------------------------------------------*

#include "include_C_independantTask.h"

//---------------------------------------------------------------------------*

#include "include_C_taskDependsFromTask.h"

//---------------------------------------------------------------------------*

#include "include_C_taskDependsFromMessage.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        Element of map '@M_tasks'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_tasks {
  public : GGS_luint  mPriority ;
  public : GGS_luint  mOffset ;
  public : GGS_luint  mDeadline ;
  public : GGS_luint  mDurationMin ;
  public : GGS_luint  mDurationMax ;
  public : GGS_luint  mProcessor ;
  public : GGS_luint  mPeriod ;
  public : GGS_AC_task  mTaskKind ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_tasks : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_tasks (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_M_tasks & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_tasks * nextObject (void) const { return (elementOf_GGS_M_tasks *) mNextItem ; }
  public : inline elementOf_GGS_M_tasks * infObject (void) const { return (elementOf_GGS_M_tasks *) mInfPtr ; }
  public : inline elementOf_GGS_M_tasks * supObject (void) const { return (elementOf_GGS_M_tasks *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_M_tasks mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#endif
