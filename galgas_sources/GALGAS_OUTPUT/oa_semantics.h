//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'oa_semantics.h'                            *
//               Generated by version 0.14.1 (LL(1) grammar)                 *
//                       june 6th, 2005, at 22h38'3"                         *
//                                                                           *
// This program is free software; you can redistribute it and/or modify it   *
// under the terms of the GNU General Public License as published by the     *
// Free Software Foundation.                                                 *
//                                                                           *
// This program is distributed in the hope it will be useful, but WITHOUT    *
// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *
// more details.                                                             *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef oa_semantics_DEFINED
#define oa_semantics_DEFINED

#include <string.h>

// Include predefined semantics types definition *
#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldfloat.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/AC_galgas_map.h"
// Include scanner definition *
#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                    DECLARATIONS FOR MAP 'M_processor'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_processor {
  public : GGS_luint  mStep ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_processor : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_processor & inInfo) ;
  //--- Method for key compare
    public : virtual sint32 compareKeys (void * inKey) const ;
  //--- Method for getting key as C_String
    public : virtual C_String stringForKey (void) const ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : const GGS_lstring mKey ;
    public : e_M_processor mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (void * inKey, void * inInfo) ;
//--- 'empty' constructor
  public : static GGS_M_processor constructor_empty (void) ;
//--- 'hasKey' reader
  public : GGS_bool reader_hasKey (const GGS_lstring & inKey) const ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- Insert an element
  public : void insertElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               const GGS_luint & inParameter0,
                               GGS_luint * outIndex) ;
//--- Search for an element
  public : void searchElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               GGS_luint * outParameter0,
                               GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*

void searchKey_M_processor (C_Lexique & inLexique,
                                GGS_M_processor & ioMap,
                                const GGS_lstring & inKey,
                                GGS_luint   * outParameter0,
                                GGS_luint * outIndex) ;

//---------------------------------------------------------------------------*

void insertKey_M_processor (C_Lexique & inLexique,
                                GGS_M_processor & ioMap,
                                const GGS_lstring & inKey,
                                const GGS_luint &  inParameter0,
                                GGS_luint * outIndex) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     DECLARATIONS FOR MAP 'M_network'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_network {
  public : GGS_bool mCANnetwork ;
  public : GGS_luint  mScalingFactor ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_network : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_network & inInfo) ;
  //--- Method for key compare
    public : virtual sint32 compareKeys (void * inKey) const ;
  //--- Method for getting key as C_String
    public : virtual C_String stringForKey (void) const ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : const GGS_lstring mKey ;
    public : e_M_network mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (void * inKey, void * inInfo) ;
//--- 'empty' constructor
  public : static GGS_M_network constructor_empty (void) ;
//--- 'hasKey' reader
  public : GGS_bool reader_hasKey (const GGS_lstring & inKey) const ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- Insert an element
  public : void insertElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               const GGS_bool& inParameter0,
                               const GGS_luint & inParameter1,
                               GGS_luint * outIndex) ;
//--- Search for an element
  public : void searchElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               GGS_bool* outParameter0,
                               GGS_luint * outParameter1,
                               GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*

void searchKey_M_network (C_Lexique & inLexique,
                                GGS_M_network & ioMap,
                                const GGS_lstring & inKey,
                                GGS_bool  * outParameter0,
                                GGS_luint   * outParameter1,
                                GGS_luint * outIndex) ;

//---------------------------------------------------------------------------*

void insertKey_M_network (C_Lexique & inLexique,
                                GGS_M_network & ioMap,
                                const GGS_lstring & inKey,
                                const GGS_bool&  inParameter0,
                                const GGS_luint &  inParameter1,
                                GGS_luint * outIndex) ;

class cPtr_AC_canMessage ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_AC_canMessage'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_canMessage {
  protected : cPtr_AC_canMessage * mPointer ;
  public : GGS_AC_canMessage (void) ;
  public : GGS_AC_canMessage (const GGS_AC_canMessage &) ;
  public : virtual ~GGS_AC_canMessage (void) ;
  public : void operator = (const GGS_AC_canMessage &) ;
  public : bool isBuilt (void) const ;
  public : inline bool isEqualTo (const GGS_AC_canMessage & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_AC_canMessage * inSource) ;
  public : GGS_AC_canMessage (cPtr_AC_canMessage * inSource) ;
  public : inline cPtr_AC_canMessage * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : cPtr_AC_canMessage * operator () (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    DECLARATIONS FOR MAP 'M_messages'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_messages {
  public : GGS_luint  mClass ;
  public : GGS_luint  mNetworkIndex ;
  public : GGS_luint  mBytesCount ;
  public : GGS_luint  mPriority ;
  public : GGS_luint  mOffset ;
  public : GGS_luint  mDeadline ;
  public : GGS_luint  mPeriod ;
  public : GGS_AC_canMessage  mMessageKind ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_messages : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_messages & inInfo) ;
  //--- Method for key compare
    public : virtual sint32 compareKeys (void * inKey) const ;
  //--- Method for getting key as C_String
    public : virtual C_String stringForKey (void) const ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : const GGS_lstring mKey ;
    public : e_M_messages mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (void * inKey, void * inInfo) ;
//--- 'empty' constructor
  public : static GGS_M_messages constructor_empty (void) ;
//--- 'hasKey' reader
  public : GGS_bool reader_hasKey (const GGS_lstring & inKey) const ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- Insert an element
  public : void insertElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               const GGS_luint & inParameter0,
                               const GGS_luint & inParameter1,
                               const GGS_luint & inParameter2,
                               const GGS_luint & inParameter3,
                               const GGS_luint & inParameter4,
                               const GGS_luint & inParameter5,
                               const GGS_luint & inParameter6,
                               const GGS_AC_canMessage & inParameter7,
                               GGS_luint * outIndex) ;
//--- Search for an element
  public : void searchElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               GGS_luint * outParameter0,
                               GGS_luint * outParameter1,
                               GGS_luint * outParameter2,
                               GGS_luint * outParameter3,
                               GGS_luint * outParameter4,
                               GGS_luint * outParameter5,
                               GGS_luint * outParameter6,
                               GGS_AC_canMessage * outParameter7,
                               GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*

void searchKey_M_messages (C_Lexique & inLexique,
                                GGS_M_messages & ioMap,
                                const GGS_lstring & inKey,
                                GGS_luint   * outParameter0,
                                GGS_luint   * outParameter1,
                                GGS_luint   * outParameter2,
                                GGS_luint   * outParameter3,
                                GGS_luint   * outParameter4,
                                GGS_luint   * outParameter5,
                                GGS_luint   * outParameter6,
                                GGS_AC_canMessage   * outParameter7,
                                GGS_luint * outIndex) ;

//---------------------------------------------------------------------------*

void insertKey_M_messages (C_Lexique & inLexique,
                                GGS_M_messages & ioMap,
                                const GGS_lstring & inKey,
                                const GGS_luint &  inParameter0,
                                const GGS_luint &  inParameter1,
                                const GGS_luint &  inParameter2,
                                const GGS_luint &  inParameter3,
                                const GGS_luint &  inParameter4,
                                const GGS_luint &  inParameter5,
                                const GGS_luint &  inParameter6,
                                const GGS_AC_canMessage &  inParameter7,
                                GGS_luint * outIndex) ;

class cPtr_AC_task ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        GALGAS class 'GGS_AC_task'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_task {
  protected : cPtr_AC_task * mPointer ;
  public : GGS_AC_task (void) ;
  public : GGS_AC_task (const GGS_AC_task &) ;
  public : virtual ~GGS_AC_task (void) ;
  public : void operator = (const GGS_AC_task &) ;
  public : bool isBuilt (void) const ;
  public : inline bool isEqualTo (const GGS_AC_task & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_AC_task * inSource) ;
  public : GGS_AC_task (cPtr_AC_task * inSource) ;
  public : inline cPtr_AC_task * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : cPtr_AC_task * operator () (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      DECLARATIONS FOR MAP 'M_tasks'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_tasks {
  public : GGS_luint  mPriority ;
  public : GGS_luint  mOffset ;
  public : GGS_luint  mDeadline ;
  public : GGS_luint  mDurationMin ;
  public : GGS_luint  mDurationMax ;
  public : GGS_luint  mProcessor ;
  public : GGS_luint  mPeriod ;
  public : GGS_AC_task  mTaskKind ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_tasks : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_tasks & inInfo) ;
  //--- Method for key compare
    public : virtual sint32 compareKeys (void * inKey) const ;
  //--- Method for getting key as C_String
    public : virtual C_String stringForKey (void) const ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : const GGS_lstring mKey ;
    public : e_M_tasks mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (void * inKey, void * inInfo) ;
//--- 'empty' constructor
  public : static GGS_M_tasks constructor_empty (void) ;
//--- 'hasKey' reader
  public : GGS_bool reader_hasKey (const GGS_lstring & inKey) const ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- Insert an element
  public : void insertElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               const GGS_luint & inParameter0,
                               const GGS_luint & inParameter1,
                               const GGS_luint & inParameter2,
                               const GGS_luint & inParameter3,
                               const GGS_luint & inParameter4,
                               const GGS_luint & inParameter5,
                               const GGS_luint & inParameter6,
                               const GGS_AC_task & inParameter7,
                               GGS_luint * outIndex) ;
//--- Search for an element
  public : void searchElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               GGS_luint * outParameter0,
                               GGS_luint * outParameter1,
                               GGS_luint * outParameter2,
                               GGS_luint * outParameter3,
                               GGS_luint * outParameter4,
                               GGS_luint * outParameter5,
                               GGS_luint * outParameter6,
                               GGS_AC_task * outParameter7,
                               GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*

void searchKey_M_tasks (C_Lexique & inLexique,
                                GGS_M_tasks & ioMap,
                                const GGS_lstring & inKey,
                                GGS_luint   * outParameter0,
                                GGS_luint   * outParameter1,
                                GGS_luint   * outParameter2,
                                GGS_luint   * outParameter3,
                                GGS_luint   * outParameter4,
                                GGS_luint   * outParameter5,
                                GGS_luint   * outParameter6,
                                GGS_AC_task   * outParameter7,
                                GGS_luint * outIndex) ;

//---------------------------------------------------------------------------*

void insertKey_M_tasks (C_Lexique & inLexique,
                                GGS_M_tasks & ioMap,
                                const GGS_lstring & inKey,
                                const GGS_luint &  inParameter0,
                                const GGS_luint &  inParameter1,
                                const GGS_luint &  inParameter2,
                                const GGS_luint &  inParameter3,
                                const GGS_luint &  inParameter4,
                                const GGS_luint &  inParameter5,
                                const GGS_luint &  inParameter6,
                                const GGS_AC_task &  inParameter7,
                                GGS_luint * outIndex) ;

void performComputations (C_Lexique &,
                                GGS_M_processor  &,
                                GGS_M_network  &,
                                GGS_M_messages  &,
                                GGS_M_tasks  &) ;

#include "include_AC_canMessage.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'C_canIndependantMessage'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_C_canIndependantMessage

#define macroInheritFrom_C_canIndependantMessage

class cPtr_C_canIndependantMessage : public cPtr_AC_canMessage {
  private : typedef cPtr_AC_canMessage inherited ;
  macroInheritFrom_AC_canMessage
  macro_C_canIndependantMessage
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_C_canIndependantMessage'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_canIndependantMessage {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_C_canIndependantMessage * constructor_new () ;
  #else
    public : inline static cPtr_C_canIndependantMessage * constructor_new () {
      return new cPtr_C_canIndependantMessage() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'C_canMessageFromMessage'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_C_canMessageFromMessage

#define macroInheritFrom_C_canMessageFromMessage

class cPtr_C_canMessageFromMessage : public cPtr_AC_canMessage {
  private : typedef cPtr_AC_canMessage inherited ;
  macroInheritFrom_AC_canMessage
  macro_C_canMessageFromMessage
  public : cPtr_C_canMessageFromMessage (const GGS_luint & ) ;
  public : GGS_luint  mMessageIndex ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_C_canMessageFromMessage'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_canMessageFromMessage {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_C_canMessageFromMessage * constructor_new (const GGS_luint & argument_0) ;
  #else
    public : inline static cPtr_C_canMessageFromMessage * constructor_new (const GGS_luint & argument_0) {
      return new cPtr_C_canMessageFromMessage(argument_0) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_canMessageFromTask'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_C_canMessageFromTask

#define macroInheritFrom_C_canMessageFromTask

class cPtr_C_canMessageFromTask : public cPtr_AC_canMessage {
  private : typedef cPtr_AC_canMessage inherited ;
  macroInheritFrom_AC_canMessage
  macro_C_canMessageFromTask
  public : cPtr_C_canMessageFromTask (const GGS_luint & ) ;
  public : GGS_luint  mTaskIndex ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_canMessageFromTask'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_canMessageFromTask {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_C_canMessageFromTask * constructor_new (const GGS_luint & argument_0) ;
  #else
    public : inline static cPtr_C_canMessageFromTask * constructor_new (const GGS_luint & argument_0) {
      return new cPtr_C_canMessageFromTask(argument_0) ;
    }
  #endif
} ;

#include "include_AC_task.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'C_independantTask'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_C_independantTask

#define macroInheritFrom_C_independantTask

class cPtr_C_independantTask : public cPtr_AC_task {
  private : typedef cPtr_AC_task inherited ;
  macroInheritFrom_AC_task
  macro_C_independantTask
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_independantTask'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_independantTask {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_C_independantTask * constructor_new () ;
  #else
    public : inline static cPtr_C_independantTask * constructor_new () {
      return new cPtr_C_independantTask() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'C_taskDependsFromTask'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_C_taskDependsFromTask

#define macroInheritFrom_C_taskDependsFromTask

class cPtr_C_taskDependsFromTask : public cPtr_AC_task {
  private : typedef cPtr_AC_task inherited ;
  macroInheritFrom_AC_task
  macro_C_taskDependsFromTask
  public : cPtr_C_taskDependsFromTask (const GGS_luint & ,
                                const GGS_luint & ) ;
  public : GGS_luint  mTask ;
  public : GGS_luint  mEvery ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_taskDependsFromTask'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_taskDependsFromTask {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_C_taskDependsFromTask * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) ;
  #else
    public : inline static cPtr_C_taskDependsFromTask * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) {
      return new cPtr_C_taskDependsFromTask(argument_0,
                                argument_1) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'C_taskDependsFromMessage'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_C_taskDependsFromMessage

#define macroInheritFrom_C_taskDependsFromMessage

class cPtr_C_taskDependsFromMessage : public cPtr_AC_task {
  private : typedef cPtr_AC_task inherited ;
  macroInheritFrom_AC_task
  macro_C_taskDependsFromMessage
  public : cPtr_C_taskDependsFromMessage (const GGS_luint & ,
                                const GGS_luint & ) ;
  public : GGS_luint  mMessage ;
  public : GGS_luint  mEvery ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_C_taskDependsFromMessage'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_taskDependsFromMessage {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_C_taskDependsFromMessage * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) ;
  #else
    public : inline static cPtr_C_taskDependsFromMessage * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) {
      return new cPtr_C_taskDependsFromMessage(argument_0,
                                argument_1) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*

#endif
