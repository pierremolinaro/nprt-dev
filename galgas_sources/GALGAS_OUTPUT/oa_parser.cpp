//---------------------------------------------------------------------------*
//                                                                           *
//                           File 'oa_parser.cpp'                            *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 1st, 2010, at 19h36'18"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "oa_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "oa_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'axiome'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void oa_parser::rule_oa_5F_parser_axiome_i0_ (C_Lexique_oa_5F_scanner & inLexique) {
  GGS_M_processor  var_cas_outProcessorMap = GGS_M_processor ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (16)) ;
  GGS_M_network  var_cas_outNetworkMap = GGS_M_network ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (17)) ;
  GGS_M_messages  var_cas_outMessagesMap = GGS_M_messages ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
  GGS_M_tasks  var_cas_outTaskMap = GGS_M_tasks ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (19)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_system) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_oa_5F_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_processor) COMMA_HERE) ;
          GGS_lstring  var_cas_processorName ;
          inLexique.assignFromAttribute_identifierString (var_cas_processorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_luint  var_cas_step ;
          switch (select_oa_5F_parser_1 (inLexique)) {
            case 1 : {
              var_cas_step = GGS_luint ::constructor_new (inLexique, GGS_uint (1U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (28)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_scalingfactor) COMMA_HERE) ;
              inLexique.assignFromAttribute_ulongValue (var_cas_step) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
              const GGS_bool cond_1145 = (var_cas_step.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (32))).operator_isEqual (GGS_uint (0U)) ;
              if (cond_1145.isBuiltAndTrue ()) {
                var_cas_step.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the step value must be > 0") COMMA_SOURCE_FILE_AT_LINE (34)) ;
              }
              } break ;
            default :
              break ;
          }
          var_cas_outProcessorMap.modifier_insertKey (inLexique, var_cas_processorName, var_cas_outProcessorMap.reader_count (), var_cas_step COMMA_SOURCE_FILE_AT_LINE (36)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_bool var_cas_network ;
          switch (select_oa_5F_parser_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_can) COMMA_HERE) ;
              var_cas_network = GGS_bool (true) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_van) COMMA_HERE) ;
              var_cas_network = GGS_bool (false) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_network) COMMA_HERE) ;
          GGS_lstring  var_cas_networkName ;
          inLexique.assignFromAttribute_identifierString (var_cas_networkName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_luint  var_cas_factor ;
          switch (select_oa_5F_parser_3 (inLexique)) {
            case 1 : {
              var_cas_factor = GGS_luint ::constructor_new (inLexique, GGS_uint (1U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (52)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_scalingfactor) COMMA_HERE) ;
              inLexique.assignFromAttribute_ulongValue (var_cas_factor) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
              const GGS_bool cond_1710 = (var_cas_factor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (56))).operator_isEqual (GGS_uint (0U)) ;
              if (cond_1710.isBuiltAndTrue ()) {
                var_cas_factor.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the factor value must be > 0") COMMA_SOURCE_FILE_AT_LINE (58)) ;
              }
              } break ;
            default :
              break ;
          }
          var_cas_outNetworkMap.modifier_insertKey (inLexique, var_cas_networkName, var_cas_outNetworkMap.reader_count (), var_cas_network, var_cas_factor COMMA_SOURCE_FILE_AT_LINE (60)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_task) COMMA_HERE) ;
          GGS_lstring  var_cas_taskName ;
          inLexique.assignFromAttribute_identifierString (var_cas_taskName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_priority) COMMA_HERE) ;
          GGS_luint  var_cas_taskPriority ;
          inLexique.assignFromAttribute_ulongValue (var_cas_taskPriority) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_duration) COMMA_HERE) ;
          GGS_luint  var_cas_taskDurationMin ;
          inLexique.assignFromAttribute_ulongValue (var_cas_taskDurationMin) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken__2E__2E_) COMMA_HERE) ;
          GGS_luint  var_cas_taskDurationMax ;
          inLexique.assignFromAttribute_ulongValue (var_cas_taskDurationMax) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
          GGS_luint  var_cas_taskOffset ;
          GGS_bool var_cas_explicitOffset ;
          switch (select_oa_5F_parser_4 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_offset) COMMA_HERE) ;
              inLexique.assignFromAttribute_ulongValue (var_cas_taskOffset) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
              var_cas_explicitOffset = GGS_bool (true) ;
              } break ;
            case 2 : {
              var_cas_taskOffset = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (82)) ;
              var_cas_explicitOffset = GGS_bool (false) ;
              } break ;
            default :
              break ;
          }
          GGS_luint  var_cas_taskDeadline ;
          switch (select_oa_5F_parser_5 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_deadline) COMMA_HERE) ;
              inLexique.assignFromAttribute_ulongValue (var_cas_taskDeadline) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
              } break ;
            case 2 : {
              var_cas_taskDeadline = GGS_luint ::constructor_new (inLexique, GGS_uint (4294967295U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (90)) ;
              } break ;
            default :
              break ;
          }
          GGS_AC_task  var_cas_taskKind ;
          GGS_uint  var_cas_taskProcessorIndex ;
          GGS_luint  var_cas_taskPeriod ;
          switch (select_oa_5F_parser_6 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_period) COMMA_HERE) ;
              inLexique.assignFromAttribute_ulongValue (var_cas_taskPeriod) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_processor) COMMA_HERE) ;
              GGS_lstring  var_cas_taskProcessorName ;
              inLexique.assignFromAttribute_identifierString (var_cas_taskProcessorName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_identifier) COMMA_HERE) ;
              GGS_luint  automatic_var_2900_0 ;
              if (var_cas_outProcessorMap.isBuilt ()) {
                var_cas_outProcessorMap (HERE)->method_searchKey (inLexique, var_cas_taskProcessorName, var_cas_taskProcessorIndex, automatic_var_2900_0 COMMA_SOURCE_FILE_AT_LINE (101)) ;
              }
              var_cas_taskKind = GGS_C_independantTask ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_on) COMMA_HERE) ;
              const GGS_bool cond_3070 = var_cas_explicitOffset ;
              if (cond_3070.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("A dependant task cannot have an offset") COMMA_SOURCE_FILE_AT_LINE (107)) ;
              }
              switch (select_oa_5F_parser_7 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_task) COMMA_HERE) ;
                  GGS_lstring  var_cas_masterTaskName ;
                  inLexique.assignFromAttribute_identifierString (var_cas_masterTaskName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_identifier) COMMA_HERE) ;
                  GGS_luint  var_cas_every ;
                  switch (select_oa_5F_parser_8 (inLexique)) {
                    case 1 : {
                      var_cas_every = GGS_luint ::constructor_new (inLexique, GGS_uint (1U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (114)) ;
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_every) COMMA_HERE) ;
                      inLexique.assignFromAttribute_ulongValue (var_cas_every) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
                      } break ;
                    default :
                      break ;
                  }
                  GGS_uint  var_cas_masterTaskIndex ;
                  GGS_luint  automatic_var_3496_0 ;
                  GGS_luint  automatic_var_3496_1 ;
                  GGS_luint  automatic_var_3496_2 ;
                  GGS_luint  automatic_var_3496_3 ;
                  GGS_luint  automatic_var_3496_4 ;
                  GGS_AC_task  automatic_var_3496_5 ;
                  if (var_cas_outTaskMap.isBuilt ()) {
                    var_cas_outTaskMap (HERE)->method_searchKey (inLexique, var_cas_masterTaskName, var_cas_masterTaskIndex, automatic_var_3496_0, automatic_var_3496_1, automatic_var_3496_2, automatic_var_3496_3, automatic_var_3496_4, var_cas_taskProcessorIndex, var_cas_taskPeriod, automatic_var_3496_5 COMMA_SOURCE_FILE_AT_LINE (120)) ;
                  }
                  var_cas_taskKind = GGS_C_taskDependsFromTask ::constructor_new (inLexique, var_cas_masterTaskIndex, var_cas_every COMMA_SOURCE_FILE_AT_LINE (121)) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_message) COMMA_HERE) ;
                  GGS_lstring  var_cas_masterMessageName ;
                  inLexique.assignFromAttribute_identifierString (var_cas_masterMessageName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_identifier) COMMA_HERE) ;
                  GGS_uint  var_cas_masterMessageIndex ;
                  GGS_luint  automatic_var_3824_0 ;
                  GGS_uint  automatic_var_3824_1 ;
                  GGS_luint  automatic_var_3824_2 ;
                  GGS_luint  automatic_var_3824_3 ;
                  GGS_luint  automatic_var_3824_4 ;
                  GGS_luint  automatic_var_3824_5 ;
                  GGS_AC_canMessage  automatic_var_3824_6 ;
                  if (var_cas_outMessagesMap.isBuilt ()) {
                    var_cas_outMessagesMap (HERE)->method_searchKey (inLexique, var_cas_masterMessageName, var_cas_masterMessageIndex, automatic_var_3824_0, automatic_var_3824_1, automatic_var_3824_2, automatic_var_3824_3, automatic_var_3824_4, automatic_var_3824_5, var_cas_taskPeriod, automatic_var_3824_6 COMMA_SOURCE_FILE_AT_LINE (127)) ;
                  }
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_processor) COMMA_HERE) ;
                  GGS_lstring  var_cas_taskProcessorName ;
                  inLexique.assignFromAttribute_identifierString (var_cas_taskProcessorName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_identifier) COMMA_HERE) ;
                  GGS_luint  var_cas_every ;
                  switch (select_oa_5F_parser_9 (inLexique)) {
                    case 1 : {
                      var_cas_every = GGS_luint ::constructor_new (inLexique, GGS_uint (1U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (133)) ;
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_every) COMMA_HERE) ;
                      inLexique.assignFromAttribute_ulongValue (var_cas_every) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
                      } break ;
                    default :
                      break ;
                  }
                  GGS_luint  automatic_var_4177_0 ;
                  if (var_cas_outProcessorMap.isBuilt ()) {
                    var_cas_outProcessorMap (HERE)->method_searchKey (inLexique, var_cas_taskProcessorName, var_cas_taskProcessorIndex, automatic_var_4177_0 COMMA_SOURCE_FILE_AT_LINE (138)) ;
                  }
                  var_cas_taskKind = GGS_C_taskDependsFromMessage ::constructor_new (inLexique, var_cas_masterMessageIndex, var_cas_every COMMA_SOURCE_FILE_AT_LINE (139)) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          var_cas_outTaskMap.modifier_insertKey (inLexique, var_cas_taskName, var_cas_outTaskMap.reader_count (), var_cas_taskPriority, var_cas_taskOffset, var_cas_taskDeadline, var_cas_taskDurationMin, var_cas_taskDurationMax, var_cas_taskProcessorIndex, var_cas_taskPeriod, var_cas_taskKind COMMA_SOURCE_FILE_AT_LINE (142)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 5 : {
          GGS_luint  var_cas_messageClass ;
          switch (select_oa_5F_parser_10 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_standard) COMMA_HERE) ;
              var_cas_messageClass = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (156)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_message) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_extended) COMMA_HERE) ;
              var_cas_messageClass = GGS_luint ::constructor_new (inLexique, GGS_uint (1U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (160)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_message) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_message) COMMA_HERE) ;
              var_cas_messageClass = GGS_luint ::constructor_new (inLexique, GGS_uint (2U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (164)) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  var_cas_messageName ;
          inLexique.assignFromAttribute_identifierString (var_cas_messageName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_network) COMMA_HERE) ;
          GGS_lstring  var_cas_networkName ;
          inLexique.assignFromAttribute_identifierString (var_cas_networkName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_uint  var_cas_networkIndex ;
          GGS_bool var_cas_CANnetwork ;
          GGS_luint  automatic_var_5363_0 ;
          if (var_cas_outNetworkMap.isBuilt ()) {
            var_cas_outNetworkMap (HERE)->method_searchKey (inLexique, var_cas_networkName, var_cas_networkIndex, var_cas_CANnetwork, automatic_var_5363_0 COMMA_SOURCE_FILE_AT_LINE (173)) ;
          }
          const GGS_bool cond_5512 = (var_cas_CANnetwork).operator_and ((var_cas_messageClass.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (174))).operator_isEqual (GGS_uint (2U))) ;
          if (cond_5512.isBuiltAndTrue ()) {
            var_cas_messageClass.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a CAN message must be either standard either extended") COMMA_SOURCE_FILE_AT_LINE (176)) ;
          }else if (cond_5512.isBuiltAndFalse ()) {
            const GGS_bool cond_5647 = ((var_cas_CANnetwork).operator_not ()).operator_and ((var_cas_messageClass.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (176))).operator_isNotEqual (GGS_uint (2U))) ;
            if (cond_5647.isBuiltAndTrue ()) {
              var_cas_messageClass.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a VAN message cannot be standard or extended") COMMA_SOURCE_FILE_AT_LINE (178)) ;
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_length) COMMA_HERE) ;
          GGS_luint  var_cas_bytesCount ;
          inLexique.assignFromAttribute_ulongValue (var_cas_bytesCount) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
          const GGS_bool cond_5854 = (var_cas_CANnetwork).operator_and ((var_cas_bytesCount.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (182))).operator_strictSup (GGS_uint (8U))) ;
          if (cond_5854.isBuiltAndTrue ()) {
            var_cas_bytesCount.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("CAN message length must be <= 8 bytes") COMMA_SOURCE_FILE_AT_LINE (184)) ;
          }else if (cond_5854.isBuiltAndFalse ()) {
            const GGS_bool cond_5972 = ((var_cas_CANnetwork).operator_not ()).operator_and ((var_cas_bytesCount.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (184))).operator_strictSup (GGS_uint (28U))) ;
            if (cond_5972.isBuiltAndTrue ()) {
              var_cas_bytesCount.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("VAN message must be <= 28 bytes") COMMA_SOURCE_FILE_AT_LINE (186)) ;
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_priority) COMMA_HERE) ;
          GGS_luint  var_cas_priority ;
          inLexique.assignFromAttribute_ulongValue (var_cas_priority) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
          GGS_luint  var_cas_offset ;
          GGS_bool var_cas_explicitOffset ;
          switch (select_oa_5F_parser_11 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_offset) COMMA_HERE) ;
              inLexique.assignFromAttribute_ulongValue (var_cas_offset) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
              var_cas_explicitOffset = GGS_bool (true) ;
              } break ;
            case 2 : {
              var_cas_offset = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (197)) ;
              var_cas_explicitOffset = GGS_bool (false) ;
              } break ;
            default :
              break ;
          }
          GGS_luint  var_cas_deadline ;
          switch (select_oa_5F_parser_12 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_deadline) COMMA_HERE) ;
              inLexique.assignFromAttribute_ulongValue (var_cas_deadline) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
              } break ;
            case 2 : {
              var_cas_deadline = GGS_luint ::constructor_new (inLexique, GGS_uint (4294967295U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (205)) ;
              } break ;
            default :
              break ;
          }
          GGS_AC_canMessage  var_cas_messageKind ;
          GGS_luint  var_cas_period ;
          switch (select_oa_5F_parser_13 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_period) COMMA_HERE) ;
              inLexique.assignFromAttribute_ulongValue (var_cas_period) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_literal_5F_integer) COMMA_HERE) ;
              var_cas_messageKind = GGS_C_canIndependantMessage ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (212)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_on) COMMA_HERE) ;
              const GGS_bool cond_6745 = var_cas_explicitOffset ;
              if (cond_6745.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("A dependant task cannot have an offset") COMMA_SOURCE_FILE_AT_LINE (217)) ;
              }
              switch (select_oa_5F_parser_14 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_message) COMMA_HERE) ;
                  GGS_lstring  var_cas_name ;
                  inLexique.assignFromAttribute_identifierString (var_cas_name) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_identifier) COMMA_HERE) ;
                  GGS_uint  var_cas_messageIndex ;
                  GGS_luint  automatic_var_6950_0 ;
                  GGS_uint  automatic_var_6950_1 ;
                  GGS_luint  automatic_var_6950_2 ;
                  GGS_luint  automatic_var_6950_3 ;
                  GGS_luint  automatic_var_6950_4 ;
                  GGS_luint  automatic_var_6950_5 ;
                  GGS_AC_canMessage  automatic_var_6950_6 ;
                  if (var_cas_outMessagesMap.isBuilt ()) {
                    var_cas_outMessagesMap (HERE)->method_searchKey (inLexique, var_cas_name, var_cas_messageIndex, automatic_var_6950_0, automatic_var_6950_1, automatic_var_6950_2, automatic_var_6950_3, automatic_var_6950_4, automatic_var_6950_5, var_cas_period, automatic_var_6950_6 COMMA_SOURCE_FILE_AT_LINE (223)) ;
                  }
                  var_cas_messageKind = GGS_C_canMessageFromMessage ::constructor_new (inLexique, var_cas_messageIndex COMMA_SOURCE_FILE_AT_LINE (224)) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_task) COMMA_HERE) ;
                  GGS_lstring  var_cas_taskName ;
                  inLexique.assignFromAttribute_identifierString (var_cas_taskName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_identifier) COMMA_HERE) ;
                  GGS_uint  var_cas_taskIndex ;
                  GGS_luint  automatic_var_7217_0 ;
                  GGS_luint  automatic_var_7217_1 ;
                  GGS_luint  automatic_var_7217_2 ;
                  GGS_luint  automatic_var_7217_3 ;
                  GGS_luint  automatic_var_7217_4 ;
                  GGS_uint  automatic_var_7217_5 ;
                  GGS_AC_task  automatic_var_7217_6 ;
                  if (var_cas_outTaskMap.isBuilt ()) {
                    var_cas_outTaskMap (HERE)->method_searchKey (inLexique, var_cas_taskName, var_cas_taskIndex, automatic_var_7217_0, automatic_var_7217_1, automatic_var_7217_2, automatic_var_7217_3, automatic_var_7217_4, automatic_var_7217_5, var_cas_period, automatic_var_7217_6 COMMA_SOURCE_FILE_AT_LINE (230)) ;
                  }
                  var_cas_messageKind = GGS_C_canMessageFromTask ::constructor_new (inLexique, var_cas_taskIndex COMMA_SOURCE_FILE_AT_LINE (231)) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          var_cas_outMessagesMap.modifier_insertKey (inLexique, var_cas_messageName, var_cas_outMessagesMap.reader_count (), var_cas_messageClass, var_cas_networkIndex, var_cas_bytesCount, var_cas_priority, var_cas_offset, var_cas_deadline, var_cas_period, var_cas_messageKind COMMA_SOURCE_FILE_AT_LINE (234)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_oa_5F_scanner::kToken_end) COMMA_HERE) ;
  if (var_cas_outProcessorMap.isBuilt () &&
      var_cas_outNetworkMap.isBuilt () &&
      var_cas_outMessagesMap.isBuilt () &&
      var_cas_outTaskMap.isBuilt ()) {
    ::routine_performComputations (inLexique,  var_cas_outProcessorMap,  var_cas_outNetworkMap,  var_cas_outMessagesMap,  var_cas_outTaskMap COMMA_SOURCE_FILE_AT_LINE (239)) ;
  }
}

//---------------------------------------------------------------------------*

