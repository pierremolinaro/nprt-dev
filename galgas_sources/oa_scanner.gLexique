#---------------------------------------------------------------------------*
#                                                                           *
#   L E X I Q U E                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

lexique oa_scanner :
@string identifierString ;
@uint ulongValue ;
style identifier -> "Identifiers" ;
style keyWords -> "Key words" ;
style delimitors -> "Delimitors" ;
style integer_csts -> "Integer constants" ;

# -------------------------- identifier or key word --------------------
# keywords can be written in lower
# for identifiers, case is significant
$identifier$ ! identifierString error message "an identifier" style identifier ;

list keyWordList error message "the '%K' key word" style keyWords :
 "system", "end", "task", "standard", "extended", "message", "length",
 "priority", "period", "offset", "on", "deadline", "duration", "processor",
 "can", "van", "network", "scalingfactor", "every" ;

rule 'a'->'z' | 'A'->'Z' :
  repeat
    enterCharacterIntoString !?identifierString !* ;
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end repeat ;
  send search identifierString in keyWordList default $identifier$ ;
end rule ;

#--- Delimitors
  list delimitorsList error message "the ''%K'' delimitor" style delimitors :
    ",", ";", ".." ;
  rule list delimitorsList ;
#------------------------------- Decimal positive number ------------------
$literal_integer$ ! ulongValue error message "a decimal number" style integer_csts ;

message decimalNumberTooLarge : "decimal number too large" ;

message internalError : "internal error" ;

rule '0'->'9' :
  enterDigitIntoUInt !* !?ulongValue error decimalNumberTooLarge, internalError ;
  repeat
  while '0'->'9' :
    enterDigitIntoUInt !* !?ulongValue error decimalNumberTooLarge, internalError ;
  while '_' :
  end repeat ;
  send $literal_integer$ ;
end rule ;
#--- separators
  rule '\u0001' -> ' ' :
  end rule ;
# ------------------------------------ Comment ----------------------------
message incorrectEndOfComment : "incorrect end of comment" ;

rule '#' :
  repeat
  while '\u0001' ->'\t' | '\v'-> '\u007E' :
  end repeat ;
  select
  when '\n' :
  default
    error incorrectEndOfComment ;
  end select ;
end rule ;
end lexique ;

#---------------------------------------------------------------------------*
