#---------------------------------------------------------------------------*
#                                                                           *
#   L E X I Q U E                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

lexique oa_scanner {
@string identifierString
@uint ulongValue
style identifier -> "Identifiers"
style keyWords -> "Key words"
style delimitors -> "Delimitors"
style integerStyle -> "Integer constants"

# -------------------------- identifier or key word --------------------
# keywords can be written in lower
# for identifiers, case is significant
$identifier$ ! identifierString  style identifier error message "an identifier"

list keyWordList style keyWords error message "the '%K' key word"{
 "system", "end", "task", "standard", "extended", "message", "length",
 "priority", "period", "offset", "on", "deadline", "duration", "processor",
 "can", "van", "network", "scalingfactor", "every" }

rule 'a'->'z' | 'A'->'Z' {
  repeat
    enterCharacterIntoString ( !?identifierString !* )
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end
  send search identifierString in keyWordList default $identifier$
}

#--- Delimitors
  list delimitorsList style delimitors error message "the ''%K'' delimitor"{
    ",", ";", ".." }
  rule list delimitorsList
#------------------------------- Decimal positive number ------------------
$literal_integer$ ! ulongValue  style integerStyle error message "a decimal number"

message decimalNumberTooLarge : "decimal number too large"

message internalError : "internal error"

rule '0'->'9' {
  enterDigitIntoUInt ( !* !?ulongValue error decimalNumberTooLarge, internalError )
  repeat
  while '0'->'9' :
    enterDigitIntoUInt ( !* !?ulongValue error decimalNumberTooLarge, internalError )
  while '_' :
  end
  send $literal_integer$
}
#--- separators
  rule '\u0001' -> ' ' {
  }
# ------------------------------------ Comment ----------------------------
message incorrectEndOfComment : "incorrect end of comment"

rule '#' {
  repeat
  while '\u0001' ->'\t' | '\v'-> '\u007E' :
  end
  select
  case '\n' :
  default
    error incorrectEndOfComment
  end
}
}

#---------------------------------------------------------------------------*
