#---------------------------------------------------------------------------*
#                                                                           *
#   S Y N T A X                                                             *
#                                                                           *
#---------------------------------------------------------------------------*

syntax oa_parser (oa_scanner) {

rule <axiome>

rule <axiome> {
  var @M_processor outProcessorMap = @M_processor. emptyMap
  var @M_network outNetworkMap = @M_network. emptyMap
  var @M_messages outMessagesMap = @M_messages. emptyMap
  var @M_tasks outTaskMap = @M_tasks. emptyMap
  $system$
  repeat
  while
    $processor$
    var @lstring processorName
    $identifier$ ? processorName
    var @luint step
    select
     step = @luint. new { !1 !@location.here}
    or
      $scalingfactor$
      $literal_integer$ ? step
      if step.uint == 0 then
        error step : "the step value must be > 0"
      end
    end
    [!?outProcessorMap insertKey !processorName ![outProcessorMap count] !step]
    $;$
  while
    var @bool network
    select
      $can$
      network = true
    or
      $van$
      network = false
    end
    $network$
    var @lstring networkName
    $identifier$ ? networkName
    var @luint factor
    select
     factor = @luint. new { !1 !@location.here}
    or
      $scalingfactor$
      $literal_integer$ ? factor
      if factor.uint == 0 then
        error factor : "the factor value must be > 0"
      end
    end
    [!?outNetworkMap insertKey !networkName ![outNetworkMap count] !network !factor]
    $;$
  while
    $task$
    var @lstring taskName
    $identifier$ ? taskName
    $priority$
    var @luint taskPriority
    $literal_integer$ ? taskPriority
    $duration$
    var @luint taskDurationMin
    $literal_integer$ ? taskDurationMin
    $..$
    var @luint taskDurationMax
    $literal_integer$ ? taskDurationMax
    var @luint taskOffset
    var @bool explicitOffset
    select
      $offset$
      $literal_integer$ ? taskOffset
      explicitOffset = true
    or
      taskOffset = @luint. new { !0 ! @location.here}
      explicitOffset = false
    end
    var @luint taskDeadline
    select
      $deadline$
      $literal_integer$ ? taskDeadline
    or
      taskDeadline = @luint. new { !4294967295 !@location.here}
    end
    var @AC_task taskKind
    var @uint taskProcessorIndex
    var @luint taskPeriod
    select
      $period$
      $literal_integer$ ? taskPeriod
      $processor$
      var @lstring taskProcessorName
      $identifier$ ? taskProcessorName
      [outProcessorMap searchKey !taskProcessorName ?taskProcessorIndex ?*]
      taskKind = @C_independantTask. new
    or
      $on$
      if explicitOffset then
        error @location.here : "A dependant task cannot have an offset"
      end
      select
        $task$
        var @lstring masterTaskName
        $identifier$ ? masterTaskName
        var @luint every
        select
          every = @luint. new { !1 !@location.here}
        or
          $every$
          $literal_integer$ ? every
        end
        var @uint masterTaskIndex
        [outTaskMap searchKey !masterTaskName ?masterTaskIndex ?* ?* ?* ?* ?* ?taskProcessorIndex ?taskPeriod ?*]
        taskKind = @C_taskDependsFromTask. new { !masterTaskIndex !every}
      or
        $message$
        var @lstring masterMessageName
        $identifier$ ? masterMessageName
        var @uint masterMessageIndex
        [outMessagesMap searchKey !masterMessageName ?masterMessageIndex ?* ?* ?* ?* ?* ?* ?taskPeriod ?*]
        $processor$
        var @lstring taskProcessorName
        $identifier$ ? taskProcessorName
        var @luint every
        select
          every = @luint. new { !1 !@location.here}
        or
          $every$
          $literal_integer$ ? every
        end
        [outProcessorMap searchKey !taskProcessorName ?taskProcessorIndex ?*]
        taskKind = @C_taskDependsFromMessage. new { !masterMessageIndex !every}
      end
    end
    [!?outTaskMap insertKey !taskName ![outTaskMap count]
                                      !taskPriority
                                        !taskOffset
                                        !taskDeadline
                                        !taskDurationMin
                                        !taskDurationMax
                                        !taskProcessorIndex
                                        !taskPeriod
                                        !taskKind]
    $;$
  while
    var @luint messageClass
    select
      $standard$
      messageClass = @luint. new { !0 !@location.here}
      $message$
    or
      $extended$
      messageClass = @luint. new { !1 !@location.here}
      $message$
    or
      $message$
      messageClass = @luint. new { !2 !@location.here}
    end
    var @lstring messageName
    $identifier$ ? messageName
    $network$
    var @lstring networkName
    $identifier$ ? networkName
    var @uint networkIndex
    var @bool CANnetwork
    [outNetworkMap searchKey !networkName ?networkIndex ?CANnetwork ?*]
    if CANnetwork & (messageClass.uint == 2) then
      error messageClass : "a CAN message must be either standard either extended"
    elsif (not CANnetwork) & (messageClass.uint != 2) then
      error messageClass : "a VAN message cannot be standard or extended"
    end
    $length$
    var @luint bytesCount
    $literal_integer$ ? bytesCount
    if CANnetwork & (bytesCount.uint > 8) then
      error bytesCount : "CAN message length must be <= 8 bytes"
    elsif (not CANnetwork) & (bytesCount.uint > 28) then
      error bytesCount : "VAN message must be <= 28 bytes"
    end
    $priority$
    var @luint priority
    $literal_integer$ ? priority
    var @luint offset
    var @bool explicitOffset
    select
      $offset$
      $literal_integer$ ? offset
      explicitOffset = true
    or
      offset = @luint. new { !0 !@location.here}
      explicitOffset = false
    end
    var @luint deadline
    select
      $deadline$
      $literal_integer$ ? deadline
    or
      deadline = @luint. new { !4294967295 !@location.here}
    end
    var @AC_canMessage messageKind
    var @luint period
    select
      $period$
      $literal_integer$ ? period
      messageKind = @C_canIndependantMessage. new
    or
      $on$
      if explicitOffset then
        error @location.here : "A dependant task cannot have an offset"
      end
      select
        $message$
        var @lstring name
        $identifier$ ? name
        var @uint messageIndex
        [outMessagesMap searchKey !name ?messageIndex ?* ?* ?* ?* ?* ?* ?period ?*]
        messageKind = @C_canMessageFromMessage. new { !messageIndex}
      or
        $task$
        var @lstring taskName
        $identifier$ ? taskName
        var @uint taskIndex
        [outTaskMap searchKey !taskName ?taskIndex ?* ?* ?* ?* ?* ?* ?period ?*]
        messageKind = @C_canMessageFromTask. new { !taskIndex}
      end
    end
    [!?outMessagesMap insertKey !messageName ![outMessagesMap count]
         !messageClass !networkIndex !bytesCount !priority !offset !deadline !period !messageKind]
    $;$        
  end
  $end$
  performComputations (
    !?outProcessorMap
    !?outNetworkMap
    !?outMessagesMap
    !?outTaskMap
  )
}

}