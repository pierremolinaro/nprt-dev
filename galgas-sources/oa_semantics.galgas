#---------------------------------------------------------------------------*
#                                                                           *
#   S E M A N T I C S                                                       *
#                                                                           *
#---------------------------------------------------------------------------*



  map @M_processor {
    public var @uint mIndex
    public var @luint mStep
    %insertSetter insertKey %errorMessage "the processor '%K' has been already declared in %L"
    %searchMethod searchKey %errorMessage "the processor '%K' is not declared"
  }

  map @M_network {
    public var @uint mIndex
    public var @bool mCANnetwork
    public var @luint mScalingFactor
    %insertSetter insertKey %errorMessage "the processor '%K' has been already declared in %L"
    %searchMethod searchKey %errorMessage "the processor '%K' is not declared"
  }

  abstract refclass @AC_canMessage %generatedInSeparateFile {
  }
  
  refclass @C_canIndependantMessage : @AC_canMessage  {
  }
  
  refclass @C_canMessageFromMessage : @AC_canMessage {
    public var @uint mMessageIndex
  }
  
  refclass @C_canMessageFromTask : @AC_canMessage  {
    public var @uint mTaskIndex
  }
    
  map @M_messages {
    public var @uint mIndex
    public var @luint mClass # 0 : standard can, 1 : extented can, 2 : van
    public var @uint mNetworkIndex
    public var @luint mBytesCount
    public var @luint mPriority
    public var @luint mOffset
    public var @luint mDeadline
    public var @luint mPeriod
    public var @AC_canMessage mMessageKind
    %insertSetter insertKey %errorMessage "the CAN message '%K' has been already declared in %L"
    %searchMethod searchKey %errorMessage "the CAN message '%K' is not declared"
  }
  
  abstract refclass @AC_task %generatedInSeparateFile {
  }
  
  refclass @C_independantTask : @AC_task  {
  }
  
  refclass @C_taskDependsFromTask : @AC_task {
    public var @uint mTask
    public var @luint mEvery
 }
  
  refclass @C_taskDependsFromMessage : @AC_task {
    public var @uint mMessage
    public var @luint mEvery
  }
  
  map @M_tasks {
    public var @uint mIndex
    public var @luint mPriority
    public var @luint mOffset
    public var @luint mDeadline
    public var @luint mDurationMin
    public var @luint mDurationMax
    public var @uint mProcessor
    public var @luint mPeriod
    public var @AC_task mTaskKind
    %insertSetter insertKey %errorMessage "the task '%K' has been already declared in %L"
    %searchMethod searchKey %errorMessage "the task '%K' is not declared"
  }

extern proc performComputations
  ?!@M_processor outProcessorMap
  ?!@M_network outNetworkMap
  ?!@M_messages outMessagesMap
  ?!@M_tasks outTaskMap

