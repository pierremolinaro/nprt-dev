//---------------------------------------------------------------------------*//                                                                           *//     C++ class for implementing UNIQUE STACK                               *//                                                                           *//  Copyright (C) 2003 Pierre Molinaro.                                      *//  e-mail : molinaro@irccyn.ec-nantes.fr                                    *//  IRCCyN, Institut de Recherche en Communications et Cybernétique de Nantes*//  ECN, Ecole Centrale de Nantes                                            *//                                                                           *//  This program is free software; you can redistribute it and/or modify it  *//  under the terms of the GNU General Public License as published by the    *//  Free Software Foundation.                                                *//                                                                           *//  This program is distributed in the hope it will be useful, but WITHOUT   *//  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *//  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *//   more details.                                                           *//                                                                           *//---------------------------------------------------------------------------*#ifndef UNIQUE_STACK_DEFINED#define UNIQUE_STACK_DEFINED//---------------------------------------------------------------------------*#include "generic_arraies/TC_unique_dyn_array.h"#include "utilities/C_string.h"//---------------------------------------------------------------------------*#include <stdio.h>//---------------------------------------------------------------------------*const sint32 MARK_VDL_NODE = 0x80000000 ;//---------------------------------------------------------------------------*class C_us {//--- Constructor et destructor  public : C_us (void) ; // Null vector  public : virtual ~C_us (void) ;//--- Control copy  public : C_us (const C_us & inSource) ;  public : void operator = (const C_us & inSource) ;//--- Pointers for handling a double-linked list of all existing variables  protected : C_us * mPtrToNextExisting ;  protected : C_us * mPtrToPreviousExisting ;  private : void initLinks (void) ;  //--- Internal nodes  public : class cVDLnodeInfo {    public : cVDLnodeInfo * mPtrToNext ;    public : sint32 mID ;    public : sint32 mIndex ;        public : sint32 compare (const cVDLnodeInfo & inOperand) const ;        public : inline bool isMarked (void) const {      return (mID & MARK_VDL_NODE) != 0 ;    }    public : inline void mark (void) {      mID |= MARK_VDL_NODE ;    }    public : inline void unmark (void) {      mID &= ~ MARK_VDL_NODE ;    }        public : inline uint32 getHashCodeForMap (void) const {      return (uint32) ((mIndex << 11)                              ^ ((mPtrToNext == NULL) ? -1 : mPtrToNext->mID)) ;    }  } ;//--- Realloc unique table  public : static void reallocUniqueTable (const sint32 inTableUniqueNewSize) ;//--- Realloc addition cache  public : static void reallocAdditionCache (const sint32 inNewCacheSize) ;//--- Decision list  protected : cVDLnodeInfo * mRootPointer ;//--- Set to NULL vector  public : void setToNullVector (void) ;//--- Null vector ?  public : bool isNullVector (void) const ;//--- Vector comparison  public : bool operator == (const C_us & inOperand) const ;//--- Explore a VDL  public : static void explore_vdl (C_us & ioVDL, sint32 & outIndex) ;//--- print a vector  public : void printVector (FILE * inFile,                             const char * inPrefix,                             const sint32 inFirst,                             const sint32 inStep) const ;  public : void printVector (FILE * inFile,                             const TC_unique_dyn_array <C_string> & inNames,                             const sint32 inFirst,                             const sint32 inStep) const ;  public : void printVector (AC_output_stream & inStream,                             const TC_unique_dyn_array <C_string> & inNames,                             const sint32 inFirst,                             const sint32 inStep) const ;  public : void printVector (AC_output_stream & inStream,                             const char * inPrefix,                             const sint32 inFirst,                             const sint32 inStep) const ;//--- Print VDL summary  public : static void printVDLsummary (AC_output_stream & inOutputStream) ;//--- Get value ID (as sint32 integer)  public : inline sint32 getLongID (void) const {    return (mRootPointer != NULL) ? ((sint32) mRootPointer->mID) : 0 ;  }//--- Push a new value on stack  public : void pushValue (const sint32 inIndex) ;//--- Suppress an entry  public : void suppressEntryAtLevel (const sint32 inLevel) ;//--- Collect unused elements  public : static void collectUnusedNodes (void) ;//--- Internal methods  protected : static cVDLnodeInfo * find_or_add (const sint32 inIndex,                                                 cVDLnodeInfo * const inPointerToNext) ;  protected : static cVDLnodeInfo * internalSuppressEntry (const sint32 inLevel,                                                           cVDLnodeInfo * const inPointer) ;  protected : static sint32 smNodeCompare ;  public : static uint32 getNodeSize (void) ;  public : static sint32 getNodeComparesCount (void) { return smNodeCompare ; }  protected : static sint32 smNodeCount ;  public : static sint32 getVDLnodeCount (void) { return smNodeCount ; }  protected : static uint64 smTrivialAdd ;  public : static uint64 getTrivialAddCount (void) { return smTrivialAdd ; }  public : static uint64 getCacheSuccessCount (void) ;  public : static uint64 getCacheFailureCount (void) ;  public : static uint64 getCacheOverrideCount (void) ;  public : static uint64 getUnusedCacheEntriesCount (void) ;  public : static uint64 getCacheEntriesCount (void) ;    friend class cVDLnodeInfo ;} ;//---------------------------------------------------------------------------*#endif